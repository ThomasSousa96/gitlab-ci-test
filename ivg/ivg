#!/bin/bash

set -e

IVG_VERSION="0.0.1-SNAPSHOT"

#Version properties
PROPERTY_PROJECT_VERSION="project.version"
PROPERTY_PROJECT_VERSION_TIME="project.version.time"
PROPERTY_PROJECT_VERSION_SUFFIX="project.version.suffix"
PROPERTY_GIT_COMMIT_TIME="git.commit.time"

#Default options
CONFIG_PROPERTIES_FILE="ivg.properties"
VERSION_PROPERTIES_FILE="src/main/resources/META-INF/source-code.properties"
VERSION_SUFFIX=""
ONLY_CHANGE_SUFFIX=false
FIXUP=true
AUTOSQUASH=true
GIT_COMMIT_MESSAGE="Update to version: [version]"
VERSION_PATTERN="\[version\]"
VERSION_TIME_FORMAT="format-local:%Y.%m.%d.%H.%M.%S"
IVG_EXT_FILE="ivg-ext"
PRIMARY_IVG_EXT_FILE="$(dirname "$0")/$IVG_EXT_FILE"
SECONDARY_IVG_EXT_FILE="$(pwd)/$IVG_EXT_FILE"
TEMP_BRANCH_PREFIX="ivg/temp"
STRICT=false
QUIET=false
VERBOSE=false

#Current options
versionPropertiesFile=$VERSION_PROPERTIES_FILE
versionSuffix=$VERSION_SUFFIX
onlyChangeSuffix=$ONLY_CHANGE_SUFFIX
ivgExtFile=""
fixup=$FIXUP
autosquash=$AUTOSQUASH
gitCommitMessage=$GIT_COMMIT_MESSAGE
strict=$STRICT
quiet=$QUIET
verbose=$VERBOSE

#Goals
GOAL_VERSION_VALIDATION="VERSION VALIDATION"
GOAL_VERSION_GENERATION="VERSION GENERATION"
GOAL_GET_VERSION="GET VERSION"
GOAL_GET_VERSION_REFERENCE="GET VERSION REFERENCE"

showMessage() {
    messageType=$1
    message=$2

    if [ $messageType = "info" ]; then
        messageType="[\e[94m\e[1mINFO\e[0m\e[39m]"
    elif [ $messageType = "warning" ]; then
        messageType="[\e[93m\e[1mWARNING\e[0m\e[39m]"
    elif [ $messageType = "success" ]; then
        messageType="[\e[94m\e[1mINFO\e[0m\e[39m]"
        message="\e[92m\e[1m$message\e[0m\e[39m"
    elif [ $messageType = "error" ]; then
        messageType="[\e[91m\e[1mERROR\e[0m\e[39m]"
    elif [ $messageType = "fail" ]; then
        messageType="[\e[94m\e[1mINFO\e[0m\e[39m]"
        message="\e[91m\e[1m$message\e[0m\e[39m"
    fi

    if [ "$3" = true ] && ! $quiet ; then
        echo $(showMessage "info" "\e[1m------------------------------------------------------------------------\e[0m")
    fi

    if [ "$1" = "error" ] || [ "$1" = "fail" ]; then
        echo -e "$messageType $message" 1>&2
    elif ! $quiet ; then
        echo -e "$messageType $message"
    fi

    if [ "$4" = true ] && ! $quiet ; then
        echo $(showMessage "info" "\e[1m------------------------------------------------------------------------\e[0m")
    fi
}

getBooleanValue() {
    if [ "$2" = "$1" ]; then
        if [ "$4" == "" ]; then
            echo $3
        else
            echo $4
        fi
    elif [[ "$2" =~ ^$1=.* ]]; then
        value=$(echo $2 | cut -d '=' -f 2)
        if [ "$value" = "true" ]; then
            echo true
        elif [ "$value" = "false" ]; then
            echo false
        else
            showMessage "error" "invalid argument, use $1, $1=true or $1=false"
            exit 1
        fi
    fi
    echo $3
}

getStringValue() {
    if [[ "$2" = $1 ]] || [[ "$2" =~ ^$1=.* ]]; then
        if [[ $2 =~ ^$1=.* ]]; then
            value=$(echo $2 | cut -d '=' -f 2)
            if [ "$value" != "" ]; then
                echo "$value"
                exit 0
            fi
        fi
        showMessage "error" "invalid argument, use $4"
        exit 1
    fi
    echo $3
}

getProperty() {
    echo $(grep "^$1=" $2)
}

getPropertyValue() {
    echo $(grep "^$1=" $2 | cut -d'=' -f 2)
}

getProjectVersion() {
    showMessage "error" "No defined function to get the project version."
    exit 1
}

setProjectVersion() {
    showMessage "warning" "No defined function to set the project version."
}

getVersionReference() {
    echo $(git rev-list --since="$1" HEAD | tail -n 1)
}

formatVersion() {
    echo "$1$2"
}

loadGitInfo() {
    gitCommitTime=$(git show --quiet --format="%ci")
}

createVersionPropertiesFile() {
    mkdir -p $(dirname "$versionPropertiesFile")
    echo "#Auto generated by Infinity Version Generator (InfinityRefactoring/infinity-version-generator), do not edit this file" > "$versionPropertiesFile"
    echo "" >> "$versionPropertiesFile"
    echo "$PROPERTY_PROJECT_VERSION=$v" >> "$versionPropertiesFile"
    echo "$PROPERTY_PROJECT_VERSION_TIME=$1" >> "$versionPropertiesFile"
    echo "$PROPERTY_PROJECT_VERSION_SUFFIX=$2" >> "$versionPropertiesFile"
    echo "$PROPERTY_GIT_COMMIT_TIME=$gitCommitTime" >> "$versionPropertiesFile"
}

hasUncommittedChanges() {
    if [ "$(git status --short)" = "" ]; then
        echo false
    else
        echo true
    fi
}

commitChanges() {
    if [ "$(hasUncommittedChanges)" = "true" ]; then
        git add .
        if $fixup ; then
            git commit --fixup HEAD
        else
            git commit -m "${gitCommitMessage/$VERSION_PATTERN/$v}"
        fi
    fi
}

saveProjectVersion() {
    v=$(formatVersion $1 $2)

    createVersionPropertiesFile $1 $2
    
    setProjectVersion "$verbose" "$v"

    if $verbose ; then
       commitChanges
    else
        {
            commitChanges
        } 1>&-
    fi
}

showHeaderMessage() {
    showMessage "info" "\e[1m\e[96mInfinity Version Generator (InfinityRefactoring/infinity-version-generator)\e[39m\e[0m" true true
}

if [ -f "$PRIMARY_IVG_EXT_FILE" ]; then
    if $verbose ; then
        showMessage "info" "Importing script from: $PRIMARY_IVG_EXT_FILE"
    fi
    source "$PRIMARY_IVG_EXT_FILE"
fi

if [ -f "$SECONDARY_IVG_EXT_FILE" ]; then
    if $verbose ; then
        showMessage "info" "Importing script from: $SECONDARY_IVG_EXT_FILE"
    fi
    source "$SECONDARY_IVG_EXT_FILE"
fi

for var in "$@"; do
    if [ "$var" = "--version" ]; then
        showHeaderMessage
        showMessage "info" "Version: $IVG_VERSION"
        exit 0
    elif [ "$var" = "-h" ] || [ "$var" = "--help" ]; then
        quiet=false
        showHeaderMessage
        showMessage "info" "A flexible version generator for projects that uses the Git as control version."
        showMessage "info" "The generated version is based in the git commit time and the git commit hash and an optional suffix."
        showMessage "info"
        showMessage "info" "\e[1mUsage\e[0m:"
        showMessage "info" "    ivg [<goal>] [<options>]"
        showMessage "info" "    ivg [<options>] [<goal>]"
        showMessage "info"
        showMessage "info" "\e[1mExamples\e[0m:"
        showMessage "info" "    ivg generate"
        showMessage "info" "    ivg validate"
        showMessage "info" "    ivg get-version"
        showMessage "info" "    ivg get-reference"
        showMessage "info" "    ivg generate --verbose"
        showMessage "info" "    ivg validate --suffix=-SNAPSHOT --verbose"
        showMessage "info"
        showMessage "info" "\e[1mGoals\e[0m:"
        showMessage "info" "validate           Validates the current project version with the version defined in the version properties file. Returns 0 if the project is valid otherwise 1."
        showMessage "info" "generate           Analyses the project and if necessary generates a new version number."
        showMessage "info" "get-version        Returns the current project version."
        showMessage "info" "get-reference      Returns the git commit hash that is reference to the current version."
        showMessage "info"
        showMessage "info" "\e[1mOptions\e[0m:"
        showMessage "info" "Long options has priority over short options."
        showMessage "info" "--ocs                 Enables only the change in the version suffix" 
        showMessage "info" "                          Default value: $ONLY_CHANGE_SUFFIX"
        showMessage "info" "                          Example: --ocs, --ocs=false, --ocs=true"
        showMessage "info" "--suffix              The version number suffix" 
        showMessage "info" "                          Default value: $VERSION_SUFFIX"
        showMessage "info" "                          Example: --suffix=some-suffix"
        showMessage "info" "--cm                  The git commit message. The pattern \"$VERSION_PATTERN\" will be override by the version number" 
        showMessage "info" "                          Default value: $GIT_COMMIT_MESSAGE"
        showMessage "info" "                          Example: --cm=$GIT_COMMIT_MESSAGE"
        showMessage "info" "-p                    The version properties file path"
        showMessage "info" "                          Default value: $VERSION_PROPERTIES_FILE"
        showMessage "info" "                          Example: -p=$VERSION_PROPERTIES_FILE"
        showMessage "info" "--import              The path of the script that will be imported. This is useful to import a custom implementation of the \"setProjectVersionInConfigFiles()\" function"
        showMessage "info" "                          Default values:"
        showMessage "info" "                              $PRIMARY_IVG_EXT_FILE"
        showMessage "info" "                              $SECONDARY_IVG_EXT_FILE"
        showMessage "info" "                          Example: --import=$IVG_EXT_FILE"
        showMessage "info" "--fixup              Enable the use of the \"git commit --fixup\" command to commit the changes"
        showMessage "info" "                          Default value: $FIXUP"
        showMessage "info" "                          Example: --fixup, --fixup=false, --fixup=true"
        showMessage "info" "--autosquash         Enable the use of the \"git rebase -i --autosquash\" command to join the new commit with the previous commit. This only is enabled if the \"--fixup\" too is enabled"
        showMessage "info" "                          Default value: $FIXUP"
        showMessage "info" "                          Example: --autosquash, --autosquash=false, --autosquash=true"
        showMessage "info" "--strict              Enable the strict mode"
        showMessage "info" "                          Default value: $STRICT"
        showMessage "info" "                          Example: --strict, --strict=false, --strict=true"
        showMessage "info" "--quiet               Disable the messages"
        showMessage "info" "                          Default value: $QUIET"
        showMessage "info" "                          Example: --quiet, --quiet=false, --quiet=true"
        showMessage "info" "--verbose             Enable the verbose mode"
        showMessage "info" "                          Examples: --verbose, --verbose=false, --verbose=true"
        showMessage "info" "--version             Display the version information and exit"
        showMessage "info" "-h, --help            Display this help and exit"
        showMessage "info"
        showMessage "info" "\e[1mhttps://github.com/InfinityRefactoring/infinity-version-generator\e[0m"
        exit 0
    elif [ "$var" = "generate" ]; then
        goal=$GOAL_VERSION_GENERATION
    elif [ "$var" = "validate" ]; then
        goal=$GOAL_VERSION_VALIDATION
    elif [ "$var" = "get-version" ]; then
        goal=$GOAL_GET_VERSION
    elif [ "$var" = "get-reference" ]; then
        goal=$GOAL_GET_VERSION_REFERENCE
    else
        quiet=$(getBooleanValue "--quiet" "$var" $quiet true)
        strict=$(getBooleanValue "--strict" "$var" $strict true)
        onlyChangeSuffix=$(getBooleanValue "--ocs" "$var" $onlyChangeSuffix true)
        versionSuffix=$(getStringValue "--suffix" "$var" "$versionSuffix")
        fixup=$(getBooleanValue "--fixup" "$var" $fixup true)
        autosquash=$(getBooleanValue "--autosquash" "$var" $autosquash true)
        gitCommitMessage=$(getStringValue "--cm" "$var" "$gitCommitMessage" "--cm=$GIT_COMMIT_MESSAGE")
        versionPropertiesFile=$(getStringValue "-p" $var "$versionPropertiesFile" "-p=$VERSION_PROPERTIES_FILE")
        ivgExtFile=$(getStringValue "--import" "$var" "$ivgExtFile")
        verbose=$(getBooleanValue "--verbose" "$var" $verbose true)
    fi
done

showHeaderMessage

if [ "$ivgExtFile" != "" ]; then
    if $verbose ; then
        showMessage "info" "Importing script from: $ivgExtFile"
    fi
    source "$ivgExtFile"
fi

if [ "$goal" = "" ] ; then
    showMessage "error" "No goal enabled."
    exit 1
fi

if [ "$goal" = "$GOAL_GET_VERSION" ] ; then
    echo $(getProjectVersion)
    exit 0
fi

if [ "$goal" = "$GOAL_VERSION_VALIDATION" ] && $onlyChangeSuffix ; then
    showMessage "error" "The argument --ocs only is available in the generation goal."
    exit 1
fi

showMessage "info" "Goal: \e[1m$goal\e[0m"
showMessage "info" "Project directory: $(pwd)"

if [ ! -d ".git" ]; then
    showMessage "error" "The current directory is not a git repository."
    exit 1
fi

currentBranch=$(git branch | grep \* | cut -d ' ' -f 2)

showMessage "info" "Current git branch: \e[1m$currentBranch\e[0m"

if [ "$(hasUncommittedChanges)" = "true" ]; then
    showMessage "error" "The project has uncommitted changes, commit before run it."
    if $verbose ; then
        git status
    fi
    exit 1
fi

versionTime=$(TZ=UTC git show --quiet --date="$VERSION_TIME_FORMAT" --format="%cd")
version=$(formatVersion $versionTime $versionSuffix)

if [ -f "$versionPropertiesFile" ]; then
    savedVersion=$(getPropertyValue "$PROPERTY_PROJECT_VERSION" "$versionPropertiesFile")
    savedVersionTime=$(getPropertyValue "$PROPERTY_PROJECT_VERSION_TIME" "$versionPropertiesFile")
    savedVersionSuffix=$(getPropertyValue "$PROPERTY_PROJECT_VERSION_SUFFIX" "$versionPropertiesFile")
    savedGitCommitTime=$(getPropertyValue "$PROPERTY_GIT_COMMIT_TIME" "$versionPropertiesFile")

    if [ "$savedVersion" != "" ] && [ "$savedVersionTime" != "" ] && [ "$savedGitCommitTime" != "" ]; then
        versionReference=$(getVersionReference "$savedGitCommitTime")
        
        if [ "$goal" = "$GOAL_GET_VERSION_REFERENCE" ]; then
            echo $versionReference
            exit 0
        fi

        showMessage "info" "Saved version: \e[1m$savedVersion" true
        showMessage "info" "Version reference: \e[1m$versionReference" false true

        tempBranch="$TEMP_BRANCH_PREFIX$(date +%s)"

        git checkout -q -b $tempBranch $versionReference

        loadGitInfo

        if ! $strict ; then
            gitCommitTime="$savedGitCommitTime"
        fi

        if $onlyChangeSuffix ; then
            saveProjectVersion $savedVersionTime $savedVersionSuffix
        else
            saveProjectVersion $savedVersionTime $versionSuffix
        fi

        showMessage "info" "Checking differences between saved version and head..."

        set +e
        if $verbose ; then
            git diff --exit-code $currentBranch $tempBranch
        else
            git diff --exit-code $currentBranch $tempBranch >&-
        fi
        hasChanges=$?
        set -e

        if [ $hasChanges -eq 0 ]; then
            hasChanges=false
            showMessage "info" "No changes."
        else
            hasChanges=true
            if $verbose ; then
                showMessage "info" "Found changes."
            else
                showMessage "info" "Found changes. Enable the verbose mode to see the difference."
            fi
        fi

        git checkout -q $currentBranch
        git branch -q -D $tempBranch

        if $hasChanges ; then
            if [ "$goal" = "$GOAL_VERSION_VALIDATION" ]; then
                showMessage "fail" "$GOAL_VERSION_VALIDATION FAILED" true true
                exit 1
            elif $onlyChangeSuffix ; then
                showMessage "error" "Cannot is possible change only the version suffix, because was found changes."
                showMessage "fail" "$GOAL_VERSION_GENERATION FAILED" true true
                exit 1
            fi
        else
            if [ "$goal" = "$GOAL_VERSION_VALIDATION" ]; then
                showMessage "success" "$GOAL_VERSION_VALIDATION SUCCESS" true true
                exit 0
            elif $onlyChangeSuffix && [ "$savedVersion" != "$(formatVersion $savedVersionTime $versionSuffix)" ] ; then
                versionTime=$savedVersionTime
                version=$(formatVersion $savedVersionTime $versionSuffix)
                gitCommitTime=$savedGitCommitTime
            else
                showMessage "success" "$GOAL_VERSION_GENERATION SKIPPED" true true
                exit 0
            fi
        fi
    else
        showMessage "warning" "The \e[4m$versionPropertiesFile\e[24m version properties file is corrupted. This file is generated automatically, do not edit it."
        if [ "$goal" = "$GOAL_VERSION_VALIDATION" ] || [ "$goal" = "$GOAL_GET_VERSION_REFERENCE" ]; then
            showMessage "fail" "$goal FAILED" true true
            exit 1
        fi
    fi
else
    if [ "$goal" = "$GOAL_VERSION_VALIDATION" ] || [ "$goal" = "$GOAL_GET_VERSION_REFERENCE" ]; then
        showMessage "info" "Not found the \e[4m$versionPropertiesFile\e[24m version properties file."
        showMessage "fail" "$goal FAILED" true true
        exit 1
    elif $onlyChangeSuffix ; then
        showMessage "error" "Cannot is possible change only the version suffix, because was not found the \e[4m$versionPropertiesFile\e[24m version properties file."
        showMessage "fail" "$GOAL_VERSION_GENERATION FAILED" true true
        exit 1
    fi
fi

if ! $onlyChangeSuffix ; then
    loadGitInfo
fi

showMessage "info" "Generating new version: \e[1m$version\e[0m"

saveProjectVersion $versionTime $versionSuffix

showMessage "success" "$GOAL_VERSION_GENERATION SUCCESS" true true

if $autosquash && $fixup ; then
    GIT_SEQUENCE_EDITOR=true git rebase -i --autosquash HEAD~2
fi